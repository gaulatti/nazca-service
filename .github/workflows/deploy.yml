name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t nazca:latest .

      # Step 5: Tag the Docker image
      - name: Tag Docker image
        run: |
          docker tag nazca:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nazca:latest

      # Step 6: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nazca:latest

      # Step 7: Deploy to on-premises server
      - name: Deploy to on-premises host
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            sh -c '
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nazca:latest

            # Stop and remove any running container with the same name
            docker stop nazca || true
            docker rm nazca || true

            # Generate a UUID for awslogs-stream
            LOG_STREAM_UUID=$(uuidgen)

            # Run the new container
            docker run -d --name nazca \
            -p ${{ secrets.HTTP_PORT }}:${{ secrets.HTTP_PORT }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} \
            -e DB_CREDENTIALS="${{ secrets.DB_CREDENTIALS }}" \
            -e DB_DATABASE="${{ secrets.DB_DATABASE }}" \
            -e HTTP_PORT="${{ secrets.HTTP_PORT }}" \
            -e ASSETS_BUCKET_NAME="${{ secrets.ASSETS_BUCKET_NAME }}" \
            -e CONTAINERIZED=true \
            --restart=always \
            --log-driver=awslogs \
            --log-opt awslogs-region=${{ secrets.AWS_REGION }} \
            --log-opt awslogs-group=${{ secrets.LOGS_GROUP }} \
            --log-opt awslogs-stream="$LOG_STREAM_UUID" \
            -v ~/.aws:/root/.aws:ro \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nazca:latest
            '